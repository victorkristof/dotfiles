" Victor Kristof

" MISC {{{

set nocompatible            " Ditch vi
set hidden                  " Allows to switch buffer when modified
" filetype indent on          " Load filetype-specific indent files
filetype plugin on          " Load fileypte-specific plugins
set nobackup                " Disable backup, git can do this work
set noswapfile              " Disable .swp files
set undofile                " Enable persistent undo history
set undodir=~/.vim/undo/,.
" Remap ; to :
nnoremap ; :
xnoremap ; :
nnoremap é :
xnoremap é :
" Fix delay when exiting visual and command mode with <ESC>
set ttimeoutlen=1
" jk is <Esc>
inoremap jk <ESC>
" Leave Ex mode for good
nnoremap Q <Nop>
" Y behaves like C and D
nnoremap Y y$

" }}}
" LEADER SHORTCUTS {{{

let mapleader=","           " Leader is comma
let maplocalleader='\'      " Local leader is backslash
" Make
nnoremap <Leader>mk :!make<CR>

" }}}
" COLORS {{{

syntax on                   " Enable syntax highlighting

" }}}
" SPACES AND TABS {{{

set tabstop=4               " Number of spaces per tab
set shiftwidth=4            " Indent lines by 4 spaces
set softtabstop=4           " Number of spaces in tab when editing
set expandtab               " Tab are spaces
set autoindent              " Indent when moving to the next line while writing
" Make backspaces more powerfull
set backspace=indent,eol,start
" Add blank line above cursor
nnoremap J o<ESC>k
" Add blank line below cursor
nnoremap K O<ESC>j
" Add one space on the left side of the cursor.
nnoremap H i <ESC>l
" Add one space on the right side of the cursor.
nnoremap L a <ESC>h

" }}}
" UI CONFIG {{{

set encoding=utf-8          " Set utf-8 compatible
set number                  " Show line numbers
set relativenumber          " Enable relative numbers
set showcmd                 " Show command in bottom bar
set cursorline              " Highlight current line
set visualbell              " Visual error
set lazyredraw              " Redraw only when needed (faster macros)
set ttyfast                 " Faster redraw
set mouse=a                 " Enable the mouse
set splitbelow              " Open split below
set splitright              " Open split right
set laststatus=2            " Always display status line
set wrap linebreak nolist   " Soft wrap text longer than window width
set scrolloff=2             " Gives 2 lines of context above and bellow cursor

" Highlight cursuorline.
highlight CursorLine   cterm=NONE ctermbg=lightgrey ctermfg=NONE

" }}}
" SEARCHING {{{

set incsearch               " Search as you type
set hlsearch                " Highlight matches
set ignorecase              " Ignore case by default
set smartcase               " Smart case: search with upper case
set infercase               " Infer case for completion
set gdefault                " Substitute all occurrences by default
" Turn off search highlight
nnoremap <silent> <BS> :nohlsearch<CR>
" Replace visual selection
vnoremap <Leader>r y:%s/\(<C-r>=escape(@",'\$')<CR>\)/
" Search for selected term
vnoremap / y/<C-r>"<CR>N

" }}}
" SPELLING {{{

" Fix spelling error
nnoremap <Leader>ff 1z=
" Fix previous spelling error and come back to position
nnoremap <Leader>fp [s1z=<C-o>
" Fix next spelling error and come back to position
nnoremap <Leader>fn ]s1z=<C-o>
" Fix last spelling error from insert mode
inoremap <C-f> <C-[>[s1z=<C-o>a

" }}}
" FOLDING {{{

set foldenable              " Enable folds
nnoremap <Space> za
" Space creates folds in visual mode
vnoremap <Space> zf
" Toggles all folds in file
nnoremap - :call ToggleAllFolds()<CR>:echo<CR>
" Remove underline in cterm and bold in gui
highlight Folded cterm=bold gui=bold

" }}}
" FORMATTING {{{

" Set text width to 80 by default for all files.
set textwidth=0
" Color three columns after textwidth.
set colorcolumn=+1,+2,+3
" Format text (according to textwidth)
set formatoptions=tcqwn1j
" Format a paragraph according to the text width
nnoremap gQ m`gqip``
" Format till the end of the paragraph
nnoremap g} gq}<C-o>
" Join all line inside a paragraph
nnoremap gJ m`vipJ``
" Format in visual mode
vnoremap q gq
" Indent whole file
nnoremap g= gg=G``

" }}}
" FILES AND BUFFERS {{{

" Automatically reload files when changed from outside vim
set autoread
" Visual autocomplete for command menu
set wildmenu
" Don't offer to open certain files/directories
set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png,*.ico
set wildignore+=*.pkl,*.npy,*.spy
set wildignore+=*.pdf,*.psd
" Edit new file in current window
nnoremap <Leader>e :e **/*
" Edit new file in vertical split buffer
nnoremap <leader>E :vs **/*
" Set ctrl-z as trigger to autocompletion in macros
set wildcharm=<C-z>
" List buffers and open prompt
nnoremap <leader>b :buffer <C-z><S-Tab>
" nnoremap <leader>b :buffer **/*
" List buffers and open prompt, enter will open in split
nnoremap <leader>B :vert :sbuffer <C-z><S-Tab>
" `gf` opens file under cursor in a new vertical split
" nnoremap gf :vertical wincmd f<CR>
" Reload current file (useful when debugging new setting in vimrc)
nnoremap <Leader>r :e %<CR>

" }}}
" WINDOWS {{{

" Windows are automatically made the same size
set equalalways
" Close quickfix window.
nnoremap <C-q> :ccl<CR>

" }}}
" MOVEMENT {{{

" Disable arrow keys in normal, visual and insert modes
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>
inoremap <Up> <NOP>
inoremap <Down> <NOP>
inoremap <Left> <NOP>
inoremap <Right> <NOP>
" Move vertically by visual line unless preceded by a count. If a movement is
" greater than 5 then automatically add to the jumplist and center screen.
nnoremap <expr> j v:count ? (v:count >= 5 ? "m'" . v:count : '') . 'j' : 'gj'
nnoremap <expr> k v:count ? (v:count >= 5 ? "m'" . v:count : '') . 'k' : 'gk'
" Highlight last inserted text
nnoremap gV `[v`]
" Switch between alternate buffers
nnoremap <Tab> <C-^>

" }}}
" {{{ INSERT MODE

" Go to end of line
inoremap AA <C-[>A
" Go to beginning of line
inoremap II <C-[>I
" Start new line
inoremap <C-j> <C-[>o
" Insert current day
inoremap <C-d> <C-r>=strftime('%d-%m-%Y')<CR>
" Put yank register
inoremap <C-p> <C-r>"

" }}}
" VISUAL MODE {{{

" Allows to use dot command in visual mode
vnoremap . :norm.<CR>
" Visual shifting (does not exit visual mode)
vnoremap < <gv
vnoremap > >gv

"}}}
" NETRW {{{

" Open Netrw
nnoremap <Leader>t :Lexplore<CR>
" Tree is default view
let g:netrw_liststyle = 3
" Explore window takes 20% of available space
let g:netrw_winsize = 20
" Remove the banner
let g:netrw_banner = 0
" Open in previous window
let g:netrw_browse_split = 4
" Open the split on the right and keep the tree on the left
let g:netrw_altv = 1

" }}}
" PYTHON {{{

" Highlight all syntax
let g:python_highlight_all = 1
let g:python_highlight_operators = 0

augroup python
    autocmd!
    " Disable docstring preview window for jedi-vim
    autocmd FileType python setlocal completeopt=menuone,longest
    " Set 80 chars delimiter
    autocmd FileType python setlocal textwidth=79
    " Remove automatic formatting in Python
    autocmd FileType python setlocal formatoptions-=t

augroup END

" }}}
" MARKDOWN {{{

augroup markdown
    autocmd!
    " Set 80 chars delimiter
    autocmd FileType markdown setlocal textwidth=80
    autocmd FileType markdown setlocal colorcolumn=+1,+2,+3
    " Enable autoformat and paragraph stop on line break
    autocmd FileType markdown setlocal formatoptions+=aw
    autocmd FileType markdown setlocal foldlevel=1
    autocmd FileType markdown highlight OverLengthHard NONE
    autocmd FileType markdown highlight OverLengthSoft NONE
    " Render marked elements inline
    " autocmd FileType markdown set conceallevel=2
augroup END

" Highlight JSON
" let g:vim_markdown_json_frontmatter = 1

" }}}
" LATEX {{{
augroup latex
    autocmd!
    " Number of spaces per tab
    autocmd FileType tex setlocal tabstop=2
    " Number of spaces in tab when editing
    autocmd FileType tex setlocal softtabstop=2
    " Indent lines by 2 spaces
    autocmd FileType tex setlocal shiftwidth=2
    " Conceal level set to 2
    autocmd FileType tex setlocal conceallevel=0
    " Enable autoformat and paragraph stop on line break (useful for equation)
    " autocmd BufRead *.tex setlocal fo+=a
    " Disable colorcolumn
    autocmd FileType tex setlocal colorcolumn=
    " Insert math environment
    autocmd FileType tex nnoremap <buffer> <Localleader>m i$$<Left>
    autocmd FileType tex inoremap <C-l>m $$<Left>
    autocmd FileType tex xnoremap <buffer> <Localleader>m c$<C-r>"$<C-[>
    " Insert latex vector easily
    autocmd FileType tex nnoremap <buffer> <Localleader>v i$\vect{}$<Left><Left>
    autocmd FileType tex inoremap <C-l>v \vect{
    autocmd FileType tex xnoremap <buffer> <Localleader>v c\vect{<C-r>"}<C-[>
    " Italics
    autocmd FileType tex nnoremap <buffer> <Localleader>i i\textit{}<Left>
    autocmd FileType tex inoremap <C-l>i \textit{
    autocmd FileType tex xnoremap <buffer> <Localleader>i c\textit{<C-r>"}<C-[>
    " Bold
    autocmd FileType tex nnoremap <buffer> <Localleader>b b\textbf{}<Left>
    autocmd FileType tex inoremap <C-l>b \textbf{
    autocmd FileType tex xnoremap <buffer> <Localleader>b c\textbf{<C-r>"}<C-[>
augroup END

" }}}
" HTML & CSS {{{

augroup html
    autocmd!
    " Disable column at 80 characters
    autocmd FileType html,htmldjango setlocal colorcolumn=
    " Number of spaces per tab
    autocmd FileType html,htmldjango,css,scss setlocal tabstop=2
    " Number of spaces in tab when editing
    autocmd FileType html,htmldjango,css,scss setlocal softtabstop=2
    " Indent lines by 2 spaces
    autocmd FileType html,htmldjango,css,scss setlocal shiftwidth=2
    " Fold current tag
    autocmd FileType html,htmldjango nnoremap <buffer> <Localleader>ft Vatzf
augroup END

" }}}
" AUTOCOMMANDS {{{

" Wrapped in augroup to ensure autocmd are applied only once
augroup configgroup
    autocmd!
    " Save file when leaving insert mode
    autocmd InsertLeave *.* :w
    " Save file when losing focus
    autocmd FocusLost * :wa
    " Remove all useless white spaces
    autocmd BufWritePre * :call StripTrailingWhitespaces()
    " Spell checks Git commits
    autocmd FileType gitcommit setlocal spell
    " Spell checks textfiles
    autocmd BufRead,BufNewFile *.txt,*.md,*.tex setlocal spell
    " Automatically equalise splits when Vim is resised
    autocmd VimResized * wincmd =
augroup END

" }}}
" CUSTOM FUNCTIONS {{{

function! ReturnHighlightTerm(group, term)
   " Store output of group to variable
   let output = execute('hi ' . a:group)
   " Find the term we're looking for
   return matchstr(output, a:term.'=\zs\S*')
endfunction

" Strip trailing whitespaces.
" This is called on buffer write in the autogroup above.
function! StripTrailingWhitespaces()
    " save last search & cursor position
    let _s=@/
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    let @/=_s
    call cursor(l, c)
endfunction

" Toggles all folds in file
function! ToggleAllFolds()
    if(&foldlevel>0)
        set foldlevel=0
    else
        set foldlevel=99
    endif
endfunction

" }}}

" Configure .vimrc folding (works with modelines)
" vim:foldmethod=marker:foldlevel=0
